/*---- Initials / Dependencies ---*/
plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.runtime' version '1.12.6'
    id 'idea'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {
    // Implementation
    //implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'io.github.palexdev:materialfx:11.12.0'

    // Testing
    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation("org.testfx:testfx-core:4.0.16-alpha")
    testImplementation("org.testfx:testfx-junit5:4.0.16-alpha") // Core: https://mvnrepository.com/artifact/org.testfx/testfx-core JUnit: https://mvnrepository.com/artifact/org.testfx/testfx-junit5 guide: https://medium.com/information-and-technology/test-driven-development-in-javafx-with-testfx-66a84cd561e0
    testImplementation("org.assertj:assertj-core:3.19.0")

}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

/*---- Project variables ---*/
def projectJvmArgs = [
        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "-Xmx256m"
]
def projectMainClass = "application.Launcher"
def projectAppVersion = '1.0.0'
def projectAppName = 'Nex-UI-Toolbox-Client'
def projectAppDescription = 'A collection of tools for building Nex-UI style applications.'
//def projectPreRelease = true // will be intend for preReleaseVersions macos

/*---- Tasks ----*/
publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'My Library'
                description = 'A concise description of my library'
                url = 'http://www.example.com/library'
                properties = [
                        myProp: "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'johnd'
                        name = 'John Doe'
                        email = 'john.doe@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://example.com/my-library.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'http://example.com/my-library/'
                }
            }
        }
    }
}

/*---- Testing ----*/


/*---- Building+Plugin settings ----*/
application {
    mainClass.set(projectMainClass)
    applicationName = projectAppName
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
    }
}

javafx {
    modules = ['javafx.controls', 'javafx.fxml']
    version = '16'
}

run { jvmArgs = projectJvmArgs }

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

runtime {

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        noConsole = true
        jvmArgs = [
                "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
                //"--illegal-access=permit"
        ]
        jpackage {
            def currentOs = org.gradle.internal.os.OperatingSystem.current()

            def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
            imageOptions += ['--icon', "src/main/resources/Nex-UI-Toolbox.$imgType"]
            installerOptions += ['--vendor', 'Nex-Coder']
            installerOptions += ['--resource-dir', "build/jpackage/Nex-UI-Toolbox-Server/lib"]

            imageName = projectAppName // Should be the same
            installerName = projectAppName
            appVersion = projectAppVersion

            if(currentOs.windows) {
                installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
                installerType = 'msi'
            }
            else if (currentOs.linux) {
                installerOptions += [
                        '--linux-menu-group', 'Utility',
                        '--description', projectAppDescription,
                        '--app-version', projectAppVersion,
                        '--linux-shortcut',
                        '--linux-deb-maintainer', 'nex@nexhub.co.uk',
                        '--linux-rpm-license-type', 'Apache 2.0',
                ]
                installerType = 'deb'
            }
            else if (currentOs.macOsX) {
                installerOptions += ['--mac-package-name', projectAppName]
                installerType = 'dmg'
            }
        }
    }
}

